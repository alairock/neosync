
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: transform_hash.go

package transformers

import (
	"strings"
	"fmt"
)

type TransformHash struct{}

type TransformHashOpts struct {
	algo string
}

func NewTransformHash() *TransformHash {
	return &TransformHash{}
}

func NewTransformHashOpts(
	algo string,
) (*TransformHashOpts, error) {
	return &TransformHashOpts{
		algo: algo,
	}, nil
}

func (o *TransformHashOpts) BuildBloblangString(
	valuePath string,
) string {
	fnStr := []string{
		"value:this.%s",
		"algo:%q",
	}

	params := []any{
		valuePath,
	 	o.algo,
	}

	

	template := fmt.Sprintf("transform_hash(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *TransformHash) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "transformHash",
		Description: "Transforms input into a hash based on the configured algorithm",
		Example: "",
	}, nil
}

func (t *TransformHash) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &TransformHashOpts{}

	if _, ok := opts["algo"].(string); !ok {
		return nil, fmt.Errorf("missing required argument. function: %s argument: %s", "transformHash", "algo")
	}
	algo := opts["algo"].(string)
	transformerOpts.algo = algo

	return transformerOpts, nil
}
